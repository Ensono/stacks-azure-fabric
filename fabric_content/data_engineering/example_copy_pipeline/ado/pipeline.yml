name: "0.0$(Rev:.r)-$(Year:yyyy).$(Month).$(DayOfMonth)"

trigger:
  paths:
    include:
      - fabric_content/data_engineering/example_copy_pipeline/*
  branches:
    include:
      - main

parameters:
  - name: deploy
    type: boolean
    default: true
    displayName: Deploy Pipeline
  - name: destroy
    type: boolean
    default: false
    displayName: Destroy Pipeline [DANGEROUS]
  - name: capacity_environments
    displayName: List of Capacities with Environments
    type: object
    default:
      - capacity_type: nonprod
        environments: [test]
      # - capacity_type: prod
      #   environments: [uat, prod]
  - name: feature_env_name
    displayName: Feature Environment Name
    type: string
    default: dev

variables:
  - name: isPR
    value: $[eq(variables['Build.Reason'], 'PullRequest')]
  - name: isMainBranch
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  # Terraform state storage
  - name: tf_state_key
    value: example_copy_pipeline
  - name: tf_state_rg
    value: stacks-terraform-state
  - name: tf_state_storage
    value: stacksstatehjfis
  - name: tf_state_container
    value: tfstate

  # Dependency versions
  - name: EirctlVersion
    value: 0.5.7

  - name: pool_vm_image
    value: ubuntu-24.04

stages:
  - stage: prelim
    displayName: Preliminaries

    jobs:
      - job: version_number
        displayName: Set Build Number
        pool:
          vmImage: $(pool_vm_image)

        steps:
          - template: ../../../../build/ado/templates/setup.yml
            parameters:
              EirctlVersion: $(EirctlVersion)

          # Update the build number
          - task: Bash@3
            displayName: Set Build Number
            inputs:
              targetType: inline
              script: |
                eirctl build:number

  - stage: deploy_to_feature_dev
    displayName: Deploy to Feature Development Workspace
    dependsOn:
      - prelim
    condition: and(succeeded(), eq(variables.isPR, true))
    variables:
      - group: azure-sp-creds
      - group: artifact-ids-${{ parameters.feature_env_name }}
      - name: FABRIC_TENANT_ID
        value: $(ARM_TENANT_ID)
      - name: FABRIC_CLIENT_ID
        value: $(ARM_CLIENT_ID)
      - name: FABRIC_CLIENT_SECRET
        value: $(ARM_CLIENT_SECRET)
      - name: TF_FILE_LOCATION
        value: fabric_content/data_engineering/example_copy_pipeline/terraform
      - name: ENV_NAME
        value: ${{ parameters.feature_env_name }}

    jobs:
      - job: deploy_terraform
        displayName: Terraform Stages
        pool:
          vmImage: $(pool_vm_image)

        steps:
          - template: ../../../../build/ado/templates/setup.yml
            parameters:
              EirctlVersion: $(EirctlVersion)

          - task: Bash@3
            displayName: Terraform Init
            inputs:
              targetType: inline
              script: |
                eirctl infra:init
            env:
              TF_BACKEND_INIT: key=$(tf_state_key)_${{ parameters.feature_env_name }},container_name=$(tf_state_container),storage_account_name=$(tf_state_storage),resource_group_name=$(tf_state_rg)

          # Configure the variables for Terraform
          - task: Bash@3
            displayName: Terraform Variables
            inputs:
              targetType: inline
              script: |
                eirctl infra:vars
            env:
              # For feature development, the engineering workspace id needs to be updated manually in the library group to match the temporary feature workspace id
              TF_VAR_engineering_workspace_id: $(engineering_workspace_id)
              TF_VAR_bronze_workspace_id: $(bronze_workspace_id)
              TF_VAR_bronze_lakehouse_id: $(bronze_lakehouse_id)
              TF_VAR_silver_workspace_id: $(silver_workspace_id)
              TF_VAR_silver_lakehouse_id: $(silver_lakehouse_id)

          - ${{ if eq(parameters.destroy, true) }}:
            - task: Bash@3
              displayName: Terraform Destroy Plan
              inputs:
                targetType: inline
                script: |
                  eirctl infra:destroy:plan

            - task: Bash@3
              displayName: Terraform Destroy Apply
              inputs:
                targetType: inline
                script: |
                  eirctl infra:destroy:apply

          - ${{ if eq(parameters.deploy, true) }}:
            - task: Bash@3
              displayName: Terraform Plan
              inputs:
                targetType: inline
                script: |
                  eirctl infra:plan

            - task: Bash@3
              displayName: Terraform Apply
              inputs:
                targetType: inline
                script: |
                  eirctl infra:apply


  - ${{ each capacity in parameters.capacity_environments }}:
    - ${{ each environment in capacity.environments }}:
      - stage: Deploy
        displayName: Deploy - ${{ capacity.capacity_type }} - ${{ environment }}
        dependsOn:
          - prelim
        condition: and(succeeded(), eq(variables.isMainBranch, true))
        variables:
          - group: azure-sp-creds
          - group: artifact-ids-${{ environment }}
          - name: FABRIC_TENANT_ID
            value: $(ARM_TENANT_ID)
          - name: FABRIC_CLIENT_ID
            value: $(ARM_CLIENT_ID)
          - name: FABRIC_CLIENT_SECRET
            value: $(ARM_CLIENT_SECRET)
          - name: TF_FILE_LOCATION
            value: fabric_content/data_engineering/example_copy_pipeline/terraform
          - name: ENV_NAME
            value: ${{ environment }}

        jobs:
          - job: deploy_terraform
            displayName: Terraform Stages
            pool:
              vmImage: $(pool_vm_image)

            steps:
              - template: ../../../../build/ado/templates/setup.yml
                parameters:
                  EirctlVersion: $(EirctlVersion)

              - task: Bash@3
                displayName: Terraform Init
                inputs:
                  targetType: inline
                  script: |
                    eirctl infra:init
                env:
                  TF_BACKEND_INIT: key=$(tf_state_key)_$(ENV_NAME),container_name=$(tf_state_container),storage_account_name=$(tf_state_storage),resource_group_name=$(tf_state_rg)

              # Configure the variables for Terraform
              - task: Bash@3
                displayName: Terraform Variables
                inputs:
                  targetType: inline
                  script: |
                    eirctl infra:vars
                env:
                  TF_VAR_engineering_workspace_id: $(engineering_workspace_id)
                  TF_VAR_bronze_workspace_id: $(bronze_workspace_id)
                  TF_VAR_bronze_lakehouse_id: $(bronze_lakehouse_id)
                  TF_VAR_silver_workspace_id: $(silver_workspace_id)
                  TF_VAR_silver_lakehouse_id: $(silver_lakehouse_id)

              - ${{ if eq(parameters.destroy, true) }}:
                - task: Bash@3
                  displayName: Terraform Destroy Plan
                  inputs:
                    targetType: inline
                    script: |
                      eirctl infra:destroy:plan

                - task: Bash@3
                  displayName: Terraform Destroy Apply
                  inputs:
                    targetType: inline
                    script: |
                      eirctl infra:destroy:apply

              - ${{ if eq(parameters.deploy, true) }}:
                - task: Bash@3
                  displayName: Terraform Plan
                  inputs:
                    targetType: inline
                    script: |
                      eirctl infra:plan

                - task: Bash@3
                  displayName: Terraform Apply
                  inputs:
                    targetType: inline
                    script: |
                      eirctl infra:apply
